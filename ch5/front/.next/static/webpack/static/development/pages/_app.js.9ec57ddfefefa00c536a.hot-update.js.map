{"version":3,"file":"static/webpack/static/development/pages/_app.js.9ec57ddfefefa00c536a.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import axios from \"axios\";\nimport { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE\n} from \"../reducers/user\";\n\naxios.defaults.baseURL = \"http://localhost:3065/api/\"; // post에도 적용이됨! -> 노드에서 모듈을 캐싱하기때문에 여기서 설정해도 post에도 적용됨\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction logInAPI(logInData) {\n  return axios.post(\"/user/logIn\", logInData, {\n    withCredentials: true // 3번째 인자로 이걸 명시해줘야 쿠키를 주고받을 수 있게 됨.\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    // yield call(logInAPI)\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      //put은 dispatch와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    //loginAPI 실패\n    // eslint-disable-next-line no-console\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction logOutAPI() {\n  // axios가 서버에 요청을 보냄\n  return axios.post(\n    \"/user/logOut\",\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // console.log(e);\n    // yield put({\n    //   type: LOG_OUT_FAILURE,\n    //   error: e\n    // });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction signUpAPI(signUpData) {\n  // axios가 서버에 요청을 보냄\n  return axios.post(\"/user\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI)\n    yield call(signUpAPI, action.data);\n    yield put({\n      //put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    //loginAPI 실패시\n    // eslint-disable-next-line no-console\n    console.log(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction loadUserAPI() {\n  // axios가 서버에 요청을 보냄\n  return axios.get(\"/user\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(LoadUserAPI)\n    const result = yield call(loadUserAPI);\n    yield put({\n      //put은 dispatch와 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    //loginAPI 실패시\n    // eslint-disable-next-line no-console\n    console.log(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchLoadUser),\n    fork(watchSignUp)\n  ]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAkBA;;;AAUA;;;AAmBA;;;AAeA;;;AAeA;;;AASA;;;AAmBA;;;AAWA;;;AAoBA;AACA;AAzIA;AACA;AACA;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AACA;AACA;AACA;AAHA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAaA;AACA;AADA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAIA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AACA;AAXA;AAYA;AACA;AACA;AAFA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AACA;AACA;AACA;AAHA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAaA;AACA;AACA;AAFA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}